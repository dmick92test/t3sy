import type { AppType } from "next/app";
import type { Session } from "next-auth";
import { ClerkProvider } from "@clerk/nextjs";

import { api } from "~/utils/api";

import { MantineProvider, ColorSchemeProvider, type ColorScheme } from '@mantine/core';
import { useHotkeys, useLocalStorage } from '@mantine/hooks';
import Head from "next/head";

import { AppShellLayout } from "~/components/layout/appshell";
import { ModalsProvider } from "@mantine/modals";

const MyApp: AppType<{ session: Session | null }> = ({
  Component,
  pageProps: { ...pageProps },
}) => {
  const [colorScheme, setColorScheme] = useLocalStorage<ColorScheme>({
    key: 'mantine-color-scheme',
    defaultValue: 'light',
    getInitialValueInEffect: true,
  });
  const toggleColorScheme = (value?: ColorScheme) =>
    setColorScheme(value || (colorScheme === 'dark' ? 'light' : 'dark'));

  useHotkeys([['mod+J', () => toggleColorScheme()]]);

  return (
    <ColorSchemeProvider colorScheme={colorScheme} toggleColorScheme={toggleColorScheme}>
      <MantineProvider theme={{ colorScheme }} withGlobalStyles withNormalizeCSS>
        {/* This is for Next Auth */}
        {/* <SessionProvider session={session}> */}
        <ClerkProvider {...pageProps}>
          <Head>
            <title>Create T3 App</title>
            <meta name="description" content="Generated by create-t3-app" />
            <link rel="icon" href="/favicon.ico" />
          </Head>
          <AppShellLayout>
            <ModalsProvider>
              <Component {...pageProps} />
            </ModalsProvider>
          </AppShellLayout>
        </ClerkProvider>
        {/* </SessionProvider> */}
      </MantineProvider>
    </ColorSchemeProvider >
  );
};

export default api.withTRPC(MyApp);
